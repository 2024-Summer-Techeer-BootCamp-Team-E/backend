version: "3.8"

services:
  mysqldb:
    build: db
    container_name: mysqldb
    env_file:
      - "db/.env"
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network

  backend:
    build:
      context: ./django_backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
      - ./django_backend/static:/app/static
      - ./django_backend/media:/app/media
    restart: always
    networks:
      - app-network
    depends_on:
      - mysqldb
    command: bash -c "
      python wait_mysql.py &&
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn --bind 0.0.0.0:8000 django_backend.wsgi:application
      "


  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./django_backend/static:/app/static
      - ./django_backend/media:/app/media
    depends_on:
      - backend
    networks:
      - app-network

  redis_container:
    image: redis:latest
    container_name: redis
    environment:
      - TZ=Asia/Seoul
    ports:
      - "6379:6379"
    volumes:
      - ./redis/data:/data
      - ./redis/conf/redis.conf:/usr/local/conf/redis.conf
    depends_on:
      - backend
    labels:
      - "name=redis"
      - "mode=standalone"
    restart: always
    command: redis-server /usr/local/conf/redis.conf
    networks:
      - app-network

#   prometheus-example:
#     image: prom/prometheus:v2.45.6
#     container_name: prometheus-example
#     ports:
#       - "9090:9090"
#     volumes:
#       - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#     command:
#       - "--config.file=/etc/prometheus/prometheus.yml"
#     networks:
#       - app-network

  frontend:
    build:
      context: ../frontend
      dockerfile: ../frontend/Dockerfile
      args:
        API_URL: "*"
    container_name: frontend
    command: yarn dev
    ports:
      - "3001:3001"
    volumes:
      - ../frontend:/frontend
      - /frontend/node_modules
    image: run
    tty: true
    networks:
      - app-network
  
  
    
  prometheus:
    image: prom/prometheus:v2.45.6
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      - app-network

  grafana:
    image: grafana/grafana:9.5.20
    container_name: grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning #그라파나 설정(config) 볼륨. 대부분 불필요 하지만 놔두시는게 좋습니다.
      - ./grafana/data:/var/lib/grafana #그라파나 대시보드 데이터. 이걸 설정 해둬야지 가상 볼륨을 날리셔도 대시보드들이 남아있습니다.
    ports:
      - "3000:3000"
    networks:
      - app-network


  elasticsearch:
    build:
      context: docker-elk/elasticsearch/
      args:
        ELASTIC_VERSION: 8.5.2
    volumes:
      - ./docker-elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk
    restart: unless-stopped

  logstash:
    build:
      context: docker-elk/logstash/
      args:
        ELASTIC_VERSION: 8.5.2
    volumes:
      - ./docker-elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./docker-elk/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - 5044:5044
      - 50000:50000/tcp
      - 50000:50000/udp
      - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    build:
      context: docker-elk/kibana/
      args:
        ELASTIC_VERSION: 8.5.2
    volumes:
      - ./docker-elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch
    restart: unless-stopped

  filebeat:
    build:
      context: docker-elk/extensions/filebeat/
      args:
        ELASTIC_VERSION: 8.5.2
    entrypoint: "filebeat -e -strict.perms=false"
    volumes:
      - ./docker-elk/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./nginx/log:/var/log/nginx # nginx log path (require same option on nginx container)
    depends_on:
      - logstash
      - elasticsearch
      - kibana
    networks:
      - elk

volumes:
  mysql-data:
  redis-data:

networks:
  app-network:

networks:
  elk:
    driver: bridge